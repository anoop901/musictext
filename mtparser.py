#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 8, 8, 1, 43, 57, 0)

__all__ = [
    'MusicTextParser',
    'MusicTextSemantics',
    'main'
]

KEYWORDS = set([])


class MusicTextBuffer(Buffer):
    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='',
                 **kwargs):
        super(MusicTextBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class MusicTextParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 namechars='',
                 **kwargs):
        super(MusicTextParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    def parse(self, text, *args, **kwargs):
        if not isinstance(text, Buffer):
            text = MusicTextBuffer(text, **kwargs)
        return super(MusicTextParser, self).parse(text, *args, **kwargs)

    @graken()
    def _start_(self):
        self._melody_()
        self._check_eof()

    @graken()
    def _melody_(self):

        def block0():
            self._beat_()
        self._closure(block0)

    @graken()
    def _beat_(self):
        with self._choice():
            with self._option():
                self._note_()
                self.name_last_node('@')
            with self._option():
                self._pair_()
                self.name_last_node('@')
            with self._option():
                self._triplet_()
                self.name_last_node('@')
            with self._option():
                self._constant('rest')
                self.name_last_node('type')
                self._token('.')
            with self._option():
                self._constant('sustain')
                self.name_last_node('type')
                self._token('-')
            with self._option():
                self._harmony_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['type'],
            []
        )

    @graken()
    def _note_(self):
        with self._choice():
            with self._option():
                self._upperletter_()
                self.name_last_node('letter')
                self._accidental_()
                self.name_last_node('acc')

                def block3():
                    self._token("'")
                self._closure(block3)
                self.name_last_node('upoctave')
            with self._option():
                self._lowerletter_()
                self.name_last_node('letter')
                with self._optional():
                    self._accidental_()
                    self.name_last_node('acc')

                def block7():
                    self._token(',')
                self._closure(block7)
                self.name_last_node('downoctave')
            self._error('no available options')
        self.ast._define(
            ['letter', 'acc', 'upoctave', 'downoctave'],
            []
        )

    @graken()
    def _upperletter_(self):
        self._pattern(r'[A-G]')

    @graken()
    def _lowerletter_(self):
        self._pattern(r'[a-g]')

    @graken()
    def _accidental_(self):
        with self._choice():
            with self._option():
                self._constant('sharp')
                self.name_last_node('type')

                def block2():
                    self._token('#')
                self._positive_closure(block2)
                self.name_last_node('acc_arr')
            with self._option():
                self._constant('flat')
                self.name_last_node('type')

                def block5():
                    self._token('@')
                self._positive_closure(block5)
                self.name_last_node('acc_arr')
            with self._option():
                self._constant('natural')
                self.name_last_node('type')
            self._error('no available options')
        self.ast._define(
            ['type', 'acc_arr'],
            []
        )

    @graken()
    def _pair_(self):
        self._constant('pair')
        self.name_last_node('type')
        self._token('[')
        self._beat_()
        self.add_last_node_to_name('subbeats')
        self._beat_()
        self.add_last_node_to_name('subbeats')
        self._token(']')
        self.ast._define(
            ['type'],
            ['subbeats']
        )

    @graken()
    def _triplet_(self):
        self._constant('triplet')
        self.name_last_node('type')
        self._token('(')
        self._beat_()
        self.add_last_node_to_name('subbeats')
        self._beat_()
        self.add_last_node_to_name('subbeats')
        self._beat_()
        self.add_last_node_to_name('subbeats')
        self._token(')')
        self.ast._define(
            ['type'],
            ['subbeats']
        )

    @graken()
    def _harmony_(self):
        self._constant('harmony')
        self.name_last_node('type')
        self._token('{')
        self._melody_()
        self.add_last_node_to_name('melodies')

        def block2():
            self._token('|')
            self._melody_()
            self.add_last_node_to_name('melodies')
        self._closure(block2)
        self._token('}')
        self.ast._define(
            ['type'],
            ['melodies']
        )


class MusicTextSemantics(object):
    def start(self, ast):
        return ast

    def melody(self, ast):
        return ast

    def beat(self, ast):
        return ast

    def note(self, ast):
        return ast

    def upperletter(self, ast):
        return ast

    def lowerletter(self, ast):
        return ast

    def accidental(self, ast):
        return ast

    def pair(self, ast):
        return ast

    def triplet(self, ast):
        return ast

    def harmony(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = MusicTextParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, MusicTextParser, name='MusicText')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
